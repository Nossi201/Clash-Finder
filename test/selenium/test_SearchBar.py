# test\selenium\test_SearchBar.py
# Generated by Selenium IDE
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
BASE_URL = "http://127.0.0.1:5000"

class TestSearch():
    """End-to-End test for the search bar with multiple inputs.

    No helper methods inside the class â€” all waits and assertions are inlined
    in the test method for maximum readability.
    """
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.wait = WebDriverWait(self.driver, 15)

    def teardown_method(self, method):
        self.driver.quit()

    @pytest.mark.parametrize(
      "name,server,expectation",
      [
        ("HextechChest#202", "eu west", "work"),
        ("Haxxs#EUNE", "eu west", "work"),
        ("Haxxs#", "eu west", "error"),  # negatywny case
      ],
    )
    def test_search(self, name, server, expectation):
        self.driver.get(BASE_URL)
        self.driver.set_window_size(1936, 1096)

        name_input = self.wait.until(EC.element_to_be_clickable((By.ID, "tekst")))
        name_input.clear()
        name_input.send_keys(name)

        server_select = self.wait.until(EC.element_to_be_clickable((By.ID, "lista")))
        Select(server_select).select_by_visible_text(server)

        search_btn = self.wait.until(EC.element_to_be_clickable((By.ID, "Search_button")))
        search_btn.click()

        if expectation == "work":
            self.wait.until(EC.url_contains("/player_stats/"))
            self.wait.until(EC.title_is("Player History"))

        else:
            self.wait.until(EC.title_is("Clash Finder"))
            alert = self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".alert.alert-danger.custom-alert"))
            )
            assert alert.is_displayed()